# API Routes for Complex Vulnerability Scenarios
# Multiple entry points leading to the same vulnerable sinks

from flask import Flask, request, jsonify
import sys
sys.path.append('..')
from demo_codebase.services.extended_services import (
    UserProfileService, 
    OrderManagementService, 
    AdminManagementService,
    BackgroundSyncService
)

app = Flask(__name__)

class VulnerabilityRoutes:
    """Routes that demonstrate complex attack paths"""
    
    def __init__(self):
        self.profile_service = UserProfileService()
        self.order_service = OrderManagementService() 
        self.admin_service = AdminManagementService()
        self.sync_service = BackgroundSyncService()

    # ENTRY POINT 1: Profile Update API - VULNERABLE
    def profile_update_endpoint(self):
        """Public API for profile updates"""
        username = request.json.get('username', '')
        email = request.json.get('email', '')
        
        if not username:
            return jsonify({"error": "Username required"}), 400
            
        # ATTACK PATH: entry_profile_api -> transport_user_service -> sink_template_injection
        result = self.profile_service.update_profile(username, email)
        
        # VULNERABILITY: Template injection in response
        welcome_template = f"<h1>Welcome {username}!</h1><p>Profile updated with email: {email}</p>"
        from flask import render_template_string
        return render_template_string(welcome_template)
    
    # ENTRY POINT 2: Order Creation API - VULNERABLE  
    def order_create_endpoint(self):
        """Internal API for order creation"""
        product_id = request.json.get('product_id', '')
        user_id = request.json.get('user_id', '')
        quantity = request.json.get('quantity', 1)
        
        # ATTACK PATH: entry_order_api -> transport_order_service -> sink_file_write
        result = self.order_service.create_order(product_id, user_id, quantity)
        
        # VULNERABILITY: File write vulnerability
        order_details = f"Order created: Product {product_id} for user {user_id}"
        file_path = f"/tmp/orders/{user_id}_order.txt"
        with open(file_path, 'w') as f:
            f.write(order_details)
            
        return jsonify(result)
    
    # ENTRY POINT 3: Admin User Deletion - PARTIALLY SECURE
    def admin_delete_endpoint(self):
        """Admin endpoint for user deletion"""
        admin_user = request.headers.get('X-Admin-User', 'unknown')
        target_user = request.json.get('target_username', '')
        
        if not target_user:
            return jsonify({"error": "Target username required"}), 400
            
        # ATTACK PATH: entry_admin_panel -> transport_admin_service -> security_wrapper -> transport_central_logger -> sink_log_writer
        result = self.admin_service.delete_user(admin_user, target_user)
        return jsonify(result)
    
    # ENTRY POINT 4: Background Job Trigger - VULNERABLE
    def background_sync_endpoint(self):
        """Endpoint to trigger background processing"""
        order_queue = request.json.get('orders', [])
        
        # ATTACK PATH: entry_background_job -> transport_order_service -> transport_central_logger -> sink_log_writer
        result = self.sync_service.process_nightly_sync(order_queue)
        return jsonify(result)

# Flask route bindings
vulnerability_routes = VulnerabilityRoutes()

@app.route('/api/profile/update', methods=['POST'])
def api_profile_update():
    return vulnerability_routes.profile_update_endpoint()

@app.route('/api/orders/new', methods=['POST']) 
def api_order_create():
    return vulnerability_routes.order_create_endpoint()

@app.route('/admin/delete_user', methods=['POST'])
def admin_delete_user():
    return vulnerability_routes.admin_delete_endpoint()

@app.route('/jobs/nightly_sync', methods=['POST'])
def background_nightly_sync():
    return vulnerability_routes.background_sync_endpoint()
